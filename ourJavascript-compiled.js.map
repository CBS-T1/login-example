{"version":3,"sources":["ourJavascript.js"],"names":[],"mappings":"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","file":"ourJavascript-compiled.js","sourcesContent":["// We create a user class, so we have an easy way to create users and further implement features at a later stage\nclass User {\n\n  // The constructor for our class, which will allow us to create new objects of our class\n  constructor(firstname, lastname, username, password) {\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.username = username;\n    this.password = this.hashPassword(password);\n    this.lastAccess = null;\n  }\n\n  // Function that allows us to set lastAccess to current time in unix time (Date.now())\n  setLastAccess(){\n    this.lastAccess = Date.now();\n  }\n\n  // Simple function to hash passwords in order for us not to store then in clear text\n  hashPassword(rawPassword){\n    var a = 1, c = 0, h, o;\n    if (rawPassword) {\n      a = 0;\n      /*jshint plusplus:false bitwise:false*/\n      for (h = rawPassword.length - 1; h >= 0; h--) {\n        o = rawPassword.charCodeAt(h);\n        a = (a<<6&268435455) + o + (o<<14);\n        c = a & 266338304;\n        a = c!==0?a^c>>21:a;\n      }\n    }else {\n      // If the password is not valid, we'll throw and error we're able to catch\n      throw new Error(\"The password supplied is not valid\");\n    }\n    return String(a);\n  }\n}\n\n// We set a debug variable in order to switch on or off debug mode of our small program\nvar debug = 1;\n\n// Initialize an empty array\nvar users = [];\n\n// Fill it up with a few users\nusers.push(new User(\"Henrik\", \"Thorn\", \"thorn\", \"qwerty\"));\nusers.push(new User(\"Peter\", \"Pan\", \"milkway\", \"password\"));\n\n// Bind the button to a variable for later use\nvar submit = document.getElementById('submit');\n\n// Bind the span for result text for later use\nvar resultSpan = document.getElementById('loginResult');\n\n// Bind a counter in order to see if the user has tried to login too many times\nvar counter = 3;\n\n// Bind the onClick-function to our own function\nsubmit.onclick = function(){\n\n  // Bind the two input fields and get the value\n  var inputUsername = document.getElementById('username');\n  var inputPassword = document.getElementById('password');\n\n  if(inputUsername.value.length == 0 || inputPassword.value.length == 0){\n    // We set the resultspan with a new text and return false to get out of this function\n    resultSpan.innerText = \"You need to enter a username and password in order to use our system\";\n    return false;\n  }\n\n  // We loop through all our users and return true if we find a match\n  for(var i = 0; i < users.length; i++) {\n\n    // Bind user to a variable for easy use\n    var user = users[i];\n\n    // If debug mode is enabled, we console.log the user object from the list\n    if(debug == 1){\n      console.log(user);\n    }\n\n    // We use a try-catch for the hash-password function, since something could go wrong.\n    try {\n\n      // We try to create a variable with the hashed version of the inputPassword\n      var hashedInputPassword = user.hashPassword(inputPassword.value);\n    } catch(error){\n\n      // We console log any error that might have been thrown\n      console.log(error);\n    }\n\n    // If username and password we have in put matches the one in our loop\n    if(user.username == inputUsername.value && user.password == hashedInputPassword) {\n\n      // Update the lastAccess of the user-object\n      user.setLastAccess();\n\n      // We set the resultspan with a new text and return true to get out of this function. The date will be in unixtime\n      // TODO: We wan't something better than unixtime for the user!\n      resultSpan.innerText = \"Hi \" + user.firstname + \" \" + user.lastname + \", you've successfully entered the system at: \"+user.lastAccess;\n\n      // Return true to jump out of the function, since we now have all we need.\n      return true;\n    }\n  }\n\n  // We check if the user has tried to enter a wrong username and password too many times\n  if(counter == 0){\n    // Since the user has tried three times, we let the user know that he's been banned\n    resultSpan.innerText = \"You've entered the wrong username and password three times. You've been banned from our system\";\n\n    // Disable the two input fields and the button in order for the user to not make any trouble\n    inputUsername.disabled = true;\n    inputPassword.disabled = true;\n    submit.disabled = true;\n\n    // Return false to stop us from doing anything further.\n    return false;\n\n  }else {\n    // Since we did not find a match, we know that the user has typed a wrong password and username\n    resultSpan.innerText = \"You've entered a username or password that does not match our stored credentials\";\n\n    // Update the counter with an attempt of logging in.\n    counter--;\n\n    // Return false, since we do not have anything more to do\n    return false;\n  }\n};"]}